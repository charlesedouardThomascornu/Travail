from ma_pile import creer_pile, est_vide, empiler, depiler, afficher_pile

#Exo 1, Q1

p1 = creer_pile()

for i in range(6):
    empiler(p1, i)
    
##afficher_pile(p1)

#Q2

p2 = creer_pile()

for i in "Python":
    empiler(p2, i)

##if not est_vide(p2):
##    x = depiler(p2)
##    
##if not est_vide(p2):
##    y = depiler(p2)
    
##afficher_pile(p2)
##print("x vaut", x, "et y vaut", y)

#Q3

p3 = creer_pile()
    
def pile_alternee(n):
    
    for x in range(n + 1):
        if x % 2 != 0:
            empiler(p3, -x)
        else:
            empiler(p3, x)
    
afficher_pile(p3)

#Exo 2, Q1

def vider_pile(pile):
    while not est_vide(pile):
        depiler(pile)
        
#Q2

def sommet_pile(pile):
    if not est_vide(pile):
        sommet = depiler(pile)
        empiler(pile, sommet)
    print("le sommet de la pile vaut", sommet)
    if est_vide(pile):
        return None
   
#Q3
    
##def taille_pile(pile):
##    compteur = 0
##    while not est_vide(pile):         # cette fonction en fonctionne que pour les piles avec des nombres 
##        taille = depiler(pile)
##        compteur = compteur + 1
##    for e in range(compteur):
##        empiler(pile, e)
##    print("la taille de la pile vaut", compteur)
        
#taille_pile(p1)
    
def taille_pile(pile):
    pile_de_stockage = creer_pile()
    compteur = 0                                    # celle-ci fonctionne pour les piles avec des nombres, mais aussi des chaînes de caractères 
    while not est_vide(pile):
        empiler(pile_de_stockage, depiler(pile))
        compteur = compteur + 1
    while not est_vide(pile_de_stockage):
        empiler(pile, depiler(pile_de_stockage))
    print("la taille de a pile vaut", compteur) 

#Q4

def inverser_pile(pile):










#Exo 4, Partie 1

def separer_expression(chaine):
    return(chaine.split(" "))
              
separer_expression("3 5 + 4 2 - *")

#Q2

def est_operateur(c):
        if c == '+' or c == '*' or c == '/' or c == '-':
            return True
        else:
            return False
    
est_operateur("3")
est_operateur("+")
est_operateur("3+5")

#Partie 2

def evaluer_postfixee(chaine):
    p = creer_pile()
    liste = separer_expression(chaine)
    for e in liste:
        if not est_operateur(e):
            empiler(p, e)
        else:
            chiffre2 = depiler(p)
            chiffre1 = depiler(p)
            resultat = str(eval(chiffre1 + e + chiffre2))
            empiler(p, resultat)
    return int(depiler(p))

evaluer_postfixee("3 5 4 2 + - *")
