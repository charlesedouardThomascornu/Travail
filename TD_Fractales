from turtle import forward, right, left, penup, pendown, circle
import turtle
##turtle.forward(100)
##turtle.right(90)
##turtle.forward(300)
##turtle.right(90)
##turtle.forward(100)
##turtle.right(90)
##turtle.forward(300)
##turtle.penup()
##turtle.forward(70)
##turtle.pendown()
##turtle.circle(-50)

def dessin(longueur1, longueur2, rayon):
    for i in range(2):
        turtle.forward(longueur1)
        turtle.left(90)
        turtle.forward(longueur2)
        turtle.left(90)
    turtle.penup()
    turtle.left(90)
    turtle.forward(longueur1+longueur2)
    turtle.right(90)
    turtle.forward(longueur1/2)
    turtle.pendown()
    turtle.circle(rayon)
        
import turtle

#Exo 1

def dessine(n):
   if n > 0:
       turtle.forward(n)
       turtle.right(90)        
       dessine(n-2)
        
##dessine(20)

#Q3

def dessine2(n):
    compteur = n
    if n == 0:
        return None
    else :
        turtle.forward(n)
        turtle.right(90)
        dessine2(n - 2)
    

##dessine2(20)
        
#Q4
        
def dessine2_V2(n):
    compteur = n
    if n == 0:
        return None
    else :
        turtle.forward(n)
        turtle.right(90)
        dessine2(n - 10)
        
#Q5.a
        
def dessine3(n):
    while n > 0:
        turtle.forward(n)
        turtle.right(90)
        n = n - 2

#Q6
        
def dessine_compteur(n):
    compteur = n // 10+1
    print (compteur)
    dessine3(n)

#dessine_compteur(500)
    
#Exo 2
    
def VonKoch(n, l):
    turtle.speed(0)
    if n == 0:
        turtle.forward(l)
    else:
        VonKoch(n-1, l//3)
        turtle.left(60)
        VonKoch(n-1, l//3)
        turtle.right(120)
        VonKoch(n-1, l//3)
        turtle.left(60)
        VonKoch(n-1, l//3)
   
#VonKoch(5, 1000)
