#Exo 1
#Q1

class Eleve:
    def __init__(self, nom, classe, note):
        self.nom = nom
        self.classe = classe
        self.note = note
#Q5

    def a_la_moyenne(self):
        if self.note >= 10:
            return True
        else:
            return False

#eleve1.a_la_moyenne()

#Q2
        
eleve1 = Eleve("Charles-Edouard", "TG3", 15)
eleve2 = Eleve("Alexis", "TG3", 14)
eleve3 = Eleve("Pierre", "TG3", 16)
eleve4 = Eleve("Yanis", "TG3", 14)

#Q3, 4

def compare(eleve_1, eleve_2):
    if eleve_1.note > eleve_2.note:
        return eleve_1.nom
    elif eleve_2.note > eleve_1.note:
        return eleve_2.nom
    else:
        return (eleve_1.nom, eleve_2.nom)

compare(eleve1, eleve2)

#Exo 2
#Q1

class TriangleRectangle:
    def __init__(self, cote1, cote2, hypothenuse):
        self.cote1 = cote1
        self.cote2 = cote2
        self.hypothenuse = hypothenuse
        
        
    def constructeur(self):
        if self.cote1**2 + self.cote2**2 == self.hypothenuse**2:
            return True
        else:
            return False

#Q2
        
triangle1 = TriangleRectangle(6, 8, 10)
triangle2 = TriangleRectangle(4, 6, 8)



from math import sqrt

#Exo 4, Q1
class Point:
    def __init__(self, abscisse, ordonnee):
        """
        créer un point
        x = abscisse
        y = ordonnée
        """
        self.x = abscisse
        self.y = ordonnee
        
#Q2       
    def distance(self):
        """
        calcul la distance à l'origine du repère
        """
        return(sqrt(self.x**2 + self.y**2))
        
#Q3       
    def __repr__(self):
        """
        on utilise __repr__ lorsqu'on souhaite afficher un objet
        """
        return "(" + str(self.x) + ", " + str(self.y) + ")"
            
#Q4
A = Point(-2, 5)
B = Point(5, 5)
C = Point(-2, -2)
D = Point(5, -2)

#Q5
def longueur_segment(a, b):
    """
    renvoie la distance ( de AB par exemple )
    """
    return(sqrt((a.x - b.x)**2 + (a.y - b.y)**2))

#Q6
longueur_segment(A, B)
longueur_segment(C, D)

#Exo 5, Q1
class Fraction:
    def __init__(self, numerateur, denominateur):
        self.num = numerateur
        self.denom = denominateur

#Q2
    def __repr__(self):
        if self.denom == 1:
            return str(self.num)
        else:
            return str(self.num) + " / " + str(self.denom)
#Q3
    def __eq__(self, f2):
        return self.num * f2.denom == self.denom * f2.num
    
    def __lt__(self, f2):
        if self.num / self.denom < f2.num / f2.denom:
            return True
        else:
            return False
        
#Q4
    def __add__(self, f2):
